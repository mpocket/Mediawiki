---
AWSTemplateFormatVersion: 2010-09-09

Description: Architecture to host CRIB MediaWiki on AWS - Creates MediaWiki web Auto Scaling group

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Web Parameters
      Parameters:
        - KeyName
        - WebInstanceType
        - WebAsgMax
        - WebAsgMin
        - WebSecurityGroup
        - WebSubnet0
        - WebSubnet1
        - WebSubnet2
        - PublicAlbTargetGroupArn
        - PublicAlbHostname
        - SslCertificate
    - Label:
        default: MediaWiki Parameters
      Parameters:
        - MWTitle
        - MWDomainName
        - MWDirectory
        - MWAdminUsername
        - MWAdminPassword
        - MWAdminEmail
        - MWLocale
    - Label:
        default: Database Parameters
      Parameters:
        - DatabaseClusterEndpointAddress
        - DatabaseName
        - DatabaseMasterUsername
        - DatabaseMasterPassword
    - Label:
        default: File System Parameters
      Parameters:
        - ElasticFileSystem
    ParameterLabels:
      DatabaseClusterEndpointAddress:
        default: DB Cluster Endpoint Address
      DatabaseMasterUsername:
        default: DB Master Username  
      DatabaseMasterPassword:
        default: DB Master Password
      DatabaseName:
        default: DB Name
      ElasticFileSystem:
        default: EFS File System
      KeyName:
        default: Existing Key Pair
      PublicAlbTargetGroupArn:
        default: Public Alb Target Group Arn
      PublicAlbHostname:
        default: Public Alb Hostname
      SslCertificate:
        default: ACM Cert attached to Public Alb
      WebAsgMax:
        default: Web ASG Max
      WebAsgMin:
        default: Web ASG Min
      WebInstanceType:
        default: Web Instance Type
      WebSecurityGroup:
        default: Web Security Group
      WebSubnet0:
        default: Web Subnet for AZ 0
      WebSubnet1:
        default: Web Subnet for AZ 1
      WebSubnet2:
        default: Web Subnet for AZ 2
      MWAdminEmail:
        default: Admin Email
      MWAdminPassword:
        default: Admin Password
      MWAdminUsername:
        default: Admin Username
      MWDirectory:
        default: Site Directory
      MWDomainName:
        default: Site Domain
      MWLocale:
        default: Language Code
      MWTitle:
        default: Site Title

Parameters:

  DatabaseClusterEndpointAddress:
    Description: The RDS cluster endpoint address.
    Type: String
  DatabaseMasterUsername:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master username.
    ConstraintDescription: Must contain only alphanumeric characters and be at least 8 characters.
    MaxLength: 16
    MinLength: 1
    Type: String
  DatabaseMasterPassword:
    AllowedPattern: ^([a-z0-9A-Z`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-
    Description: The Amazon RDS master password.
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String
  DatabaseName:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master database name.
    Type: String
  ElasticFileSystem:
    AllowedPattern: ^(fs-)([a-z0-9]{8})$
    Description: The Amazon EFS file system id.
    Type: String
  KeyName:
    AllowedPattern: ^([a-zA-Z0-9 @.`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair. Your bastion & Web instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
  PublicAlbTargetGroupArn:
    Description: The public application load balancer target group arn.
    Type: String
  PublicAlbHostname:
    Description: The hostname of the public ALB http form (e.g. http://abdc-12345-xyz.<region>.elb.amazonaws.com)
    Type: String
  SslCertificate:
    AllowedValues:
      - True
      - False
    Default: False
    Description: Is there an ACM SSL Certificate attached to the Public Alb?
    Type:
      String
  WebAsgMax:
    AllowedPattern: ^((?!0$)[1-2]?[0-9]|30)$
    ConstraintDescription: Must be a number between 1 and 30.
    Default: 4
    Description: Specifies the maximum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebAsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 2
    Description: Specifies the minimum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebInstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: t2.large
    Description: The Amazon EC2 instance type for your web instances.
    Type: String
  WebSecurityGroup:
    Description: Select the web security group.
    Type: AWS::EC2::SecurityGroup::Id
  WebSubnet0:
    Description: Select an existing web subnet for AZ 0.
    Type: AWS::EC2::Subnet::Id
  WebSubnet1:
    Description: Select an existing web subnet for AZ 1.
    Type: AWS::EC2::Subnet::Id
  WebSubnet2:
    Description: Select an existing web subnet for AZ 2.
    Type: AWS::EC2::Subnet::Id
  MWAdminEmail:
    AllowedPattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
    Description: The MediaWiki admin email address.
    Type: String
  MWAdminPassword:
    AllowedPattern: ^([a-zA-Z0-9`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-   
    Description: The MediaWiki admin password.
    Type: String
    NoEcho: true
  MWAdminUsername:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9_-])*([a-zA-Z0-9])$
    Description: The MediaWiki admin username.
    Type: String
  MWDirectory:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9_-])*([a-zA-Z0-9])$
    Description: The MediaWiki site directory.
    Type: String
  MWDomainName:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Description: '[ Optional ] The main domain name of the MediaWiki site (e.g. example.com). Leave empty to use the ALB DNS name for the MediaWiki site.'
    Type: String
  MWLocale:
    Description: The main language of the MediaWiki site;the default is 'en_GB'.
    Type: String
    Default: en_GB
  MWTitle:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9 _-]*)([a-zA-Z0-9])$
    Description: The MediaWiki website title.
    Type: String

Conditions:

  NoSslCertificate:
    !Equals [ False, !Ref SslCertificate ]
  MoreThan2AZ:
    !Or [
      !Equals [ !Ref 'AWS::Region', us-east-1 ],
      !Equals [ !Ref 'AWS::Region', us-east-2 ],
      !Equals [ !Ref 'AWS::Region', us-west-2 ],
      !Equals [ !Ref 'AWS::Region', eu-central-1 ],
      !Equals [ !Ref 'AWS::Region', eu-west-1 ],
      !Equals [ !Ref 'AWS::Region', sa-east-1 ],
      !Equals [ !Ref 'AWS::Region', ap-northeast-1 ],
      !Equals [ !Ref 'AWS::Region', ap-southeast-2 ]
    ]
  NoMWDomainName:
    !Equals [ '', !Ref MWDomainName ]

Mappings:

  RegionMap:
    ap-northeast-1:
      AMI: ami-3bd3c45c
    ap-northeast-2:
      AMI: ami-e21cc38c
    ap-south-1:
      AMI: ami-47205e28
    ap-southeast-1:
      AMI: ami-77af2014
    ap-southeast-2:
      AMI: ami-10918173
    ca-central-1:
      AMI: ami-a7aa15c3
    eu-central-1:
      AMI: ami-82be18ed
    eu-west-1:
      AMI: ami-d7b9a2b1
    eu-west-2:
      AMI: ami-ed100689
    sa-east-1:
      AMI: ami-87dab1eb
    us-east-1:
      AMI: ami-a4c7edb2
    us-east-2:
      AMI: ami-8a7859ef
    us-west-1:
      AMI: ami-327f5352
    us-west-2:
      AMI: ami-6df1e514

Resources:

  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref WebInstanceRole
  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - arn:aws:logs:*:*:*
  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref WebLaunchConfiguration
      MaxSize: !Ref WebAsgMax
      MinSize: !Ref WebAsgMin
      DesiredCapacity: !Ref WebAsgMin
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Web ASG / ', !Ref 'AWS::StackName' ] ]
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref PublicAlbTargetGroupArn
      VPCZoneIdentifier:
        !If [
          MoreThan2AZ,
          [ !Ref WebSubnet0, !Ref WebSubnet1, !Ref WebSubnet2 ],
          [ !Ref WebSubnet0, !Ref WebSubnet1 ]
        ]
    UpdatePolicy:
        AutoScalingRollingUpdate:
            MaxBatchSize: 1
            MinInstancesInService: 1
            MinSuccessfulInstancesPercent: 100
            PauseTime: PT10M
            SuspendProcesses:
              - HealthCheck
              - ReplaceUnhealthy
              - AZRebalance
              - AlarmNotification
              - ScheduledActions
            WaitOnResourceSignals: True
  WebLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deploy_webserver:
            - install_webserver
            - build_cacheclient
            - build_mediawiki
            - build_opcache
            - install_cacheclient
            - install_mediawiki
            - install_opcache
            - start_webserver
        install_webserver:
          packages:
            yum:
              awslogs: []
              httpd24: []
              mysql56: []
              php70: []
              php70-common: []
              php70-mysqlnd: []
              php70-cli: []               
              php70-mbstring: []          
              php70-xml: []               
              php70-json: []
          files:
            /tmp/create_site_conf.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -xe\n",
                    "if [ ! -f /etc/httpd/conf.d/", !Ref MWDirectory, ".conf ]; then\n",                    
                    "   touch /etc/httpd/conf.d/", !Ref MWDirectory, ".conf\n",
                    "   echo 'ServerName 127.0.0.1:80' >> /etc/httpd/conf.d/", !Ref MWDirectory, ".conf\n",
                    "   echo 'DocumentRoot /var/www/mediawiki/", !Ref MWDirectory, "' >> /etc/httpd/conf.d/", !Ref MWDirectory, ".conf\n",
                    "   echo '<Directory /var/www/mediawiki/", !Ref MWDirectory, ">' >> /etc/httpd/conf.d/", !Ref MWDirectory, ".conf\n",
                    "   echo '  Options Indexes FollowSymLinks' >> /etc/httpd/conf.d/", !Ref MWDirectory, ".conf\n",
                    "   echo '  AllowOverride All' >> /etc/httpd/conf.d/", !Ref MWDirectory, ".conf\n",
                    "   echo '  Require all granted' >> /etc/httpd/conf.d/", !Ref MWDirectory, ".conf\n",
                    "   echo '</Directory>' >> /etc/httpd/conf.d/", !Ref MWDirectory, ".conf\n",
                    "fi\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
          commands:
            create_site_conf:
              command: ./create_site_conf.sh
              cwd: /tmp
              ignoreErrors: false
        build_cacheclient:
          packages:
            yum:
              gcc-c++: []  
          files:
            /tmp/install_cacheclient.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  wget -P /tmp/ https://s3-eu-west-1.amazonaws.com/deploy.mediawiki.crib.comicrelief.com/latest/bits/AmazonElastiCacheClusterClient-2.0.1-PHP70-64bit.tar.gz
                  tar -xf '/tmp/AmazonElastiCacheClusterClient-2.0.1-PHP70-64bit.tar.gz'
                  cp '/tmp/artifact/amazon-elasticache-cluster-client.so' /usr/lib64/php/7.0/modules/
                  if [ ! -f /etc/php-7.0.d/50-memcached.ini ]; then
                      touch /etc/php-7.0.d/50-memcached.ini
                  fi
                  sed -i '3i extension=/usr/lib64/php/7.0/modules/amazon-elasticache-cluster-client.so;' /etc/php-7.0.d/50-memcached.ini
                  sed -i '3i extension=igbinary.so;' /etc/php-7.0.d/50-memcached.ini
              mode: 000500
              owner: root
              group: root
        build_opcache:
          packages:
            yum:
              php70-opcache: []
          files:
            /tmp/install_opcache.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  # create hidden opcache directory locally & change owner to apache
                  if [ ! -d /var/www/.opcache ]; then                    
                      mkdir -p /var/www/.opcache
                  fi
                  # enable opcache in /etc/php-7.0.d/10-opcache.ini
                  sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/var\/www\/.opcache/' /etc/php-7.0.d/10-opcache.ini
                  sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php-7.0.d/10-opcache.ini
                  # download opcache-instance.php to verify opcache status
                  if [ ! -f /var/www/mediawiki/${MWDirectory}/opcache-instanceid.php ]; then
                      wget -P /var/www/mediawiki/${MWDirectory}/ https://s3-eu-west-1.amazonaws.com/deploy.mediawiki.crib.comicrelief.com/latest/bits/opcache-instanceid.php
                  fi
              mode: 000500
              owner: root
              group: root
        build_mediawiki:
          files:
            /tmp/install_mediawiki.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -xe\n",
                    "\n",
                    "\n",
                    "mwdir=", !Ref MWDirectory, "\n",
                    "scriptpath=\"\"\n",
                    "domainname=", !Sub '"http://${MWDomainName}"', "\n",
                    "publicalbhostname=", !Sub '"http://${PublicAlbHostname}"', "\n",
                    "# use public alb host name if mw domain name was empty\n",
                    "serviceurl=", !If [ NoMWDomainName, $publicalbhostname, $domainname ], "\n",
                    "admin=\"admin\"\n",
                    "pass=\"password\"\n",
                    "\n",
                    "\n",
                    "# make site directory and test file\n",
                    "if [ ! -d /var/www/mediawiki/", !Ref MWDirectory, " ]; then\n",
                    " mkdir -p /var/www/mediawiki/", !Ref MWDirectory, "\n",
                    " cd /var/www/mediawiki/", !Ref MWDirectory, "\n",
                    " # Create phpinfo page\n",
                    " echo \"<?php phpinfo(); ?>\" | sudo tee /var/www/mediawiki/", !Ref MWDirectory, "/test.php\n",
                    " # install MediaWiki if not installed\n",
                    " wget -P /var/www/mediawiki/", !Ref MWDirectory, "/ https://s3-eu-west-1.amazonaws.com/deploy.mediawiki.crib.comicrelief.com/latest/bits/mediawiki-1.28.2.tar.gz\n",
                    " tar xzf mediawiki-*.tar.gz -C /var/www/mediawiki/", !Ref MWDirectory, " --strip-components 1\n",
                    " # set permissions of MediaWiki site directories\n",
                    " chown -R root:apache /var/www/mediawiki/\n",
                    " find /var/www/mediawiki/ -type d -print0 | xargs -0 chmod 750\n",
                    " find /var/www/mediawiki/ -type f -print0 | xargs -0 chmod 640\n",
                    " chown -R apache:apache /var/www/mediawiki/", !Ref MWDirectory, "/images\n",
                    " chown -R apache:apache /var/www/mediawiki/", !Ref MWDirectory, "/cache\n",
                    "\n",
                    "\n",
                    " # Check for MediaWiki configuration file and if not present copy in the version for this stack\n",
                    " #if [ ! -f /var/www/mediawiki/", !Ref MWDirectory, "/LocalSettings.php ]; then\n",
                    "   #wget -P /var/www/mediawiki/", !Ref MWDirectory, "/ https://s3-eu-west-1.amazonaws.com/deploy.mediawiki.crib.comicrelief.com/latest/bits/LocalSettings.php\n",
                    "   #chown root:apache /var/www/mediawiki/", !Ref MWDirectory, "/LocalSettings.php\n",
                    "   #chmod 640 /var/www/mediawiki/", !Ref MWDirectory, "/LocalSettings.php\n",
                    "   # php /var/www/mediawiki/", !Ref MWDirectory, "/maintenance/install.php",
                    "   # --dbserver=", !Ref DatabaseClusterEndpointAddress,
                    "   # --installdbuser=", !Ref DatabaseMasterUsername,
                    "   # --installdbpass=", !Ref DatabaseMasterPassword,
                    "   # --dbname=", !Ref DatabaseName,
                    "   # --dbuser=", !Ref DatabaseMasterUsername,
                    "   # --dbpass=", !Ref DatabaseMasterPassword,
                    "   # --dbprefix=\"mw_\"",
                    "   # --scriptpath=\"$scriptpath\"",
                    "   # --service=$serviceurl",
                    "   # --pass=$pass ", !Ref MWTitle, " $admin\n",
                    " #fi\n",
                    "\n",
                    "\n",
                    "   if [ ! -f /var/www/mediawiki/", !Ref MWDirectory, "/opcache-instanceid.php ]; then\n",
                    "     wget -P /var/www/mediawiki/", !Ref MWDirectory, "/ https://s3-eu-west-1.amazonaws.com/deploy.mediawiki.crib.comicrelief.com/latest/bits/opcache-instanceid.php\n",
                    "   fi\n",
                    "\n",
                    "RESULT=$?\n",
                    "\n",
                    "   if [ $RESULT -eq 0 ]; then\n",
                    "     touch /var/www/mediawiki/", !Ref MWDirectory, "/mediawiki.initialized\n",
                    "     else\n",
                    "     touch /var/www/mediawiki/", !Ref MWDirectory, "/mediawiki.failed\n",
                    "   fi\n",
                    "fi\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
        install_mediawiki:
          commands:
            install_mediawiki:
              command: ./install_mediawiki.sh
              cwd: /tmp
              ignoreErrors: false          
        install_cacheclient:
          commands:
            install_cacheclient:
              command: ./install_cacheclient.sh
              cwd: /tmp
              ignoreErrors: false
        install_opcache:
          commands:
            install_opcache:
              command: ./install_opcache.sh
              cwd: /tmp
              ignoreErrors: false
        start_webserver:
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      IamInstanceProfile: !Ref WebInstanceProfile
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      InstanceMonitoring: true
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref WebSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            BUILD=000502
            yum update -y
            mkdir -p /var/www/mediawiki
            mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/mediawiki
            /opt/aws/bin/cfn-init --configsets deploy_webserver --verbose --stack ${AWS::StackName} --resource WebLaunchConfiguration --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebAutoScalingGroup --region ${AWS::Region}

Outputs:

  Opcachestatus:
    Value: !Join [ '', [ !Ref PublicAlbHostname, '/opcache-instanceid.php' ] ]
